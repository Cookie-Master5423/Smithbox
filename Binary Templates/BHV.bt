//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: BHV.bt
//   Authors: Vawser (credit to TKGP for initial template from stream)
//   Version: 
//   Purpose: Behavior Script
//  Category: 
// File Mask: *.bhv
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "BHV-Types.bt";

LittleEndian();

//------------------------------------------------

typedef struct {
    short version; Assert(version == 5 || version == 6 || version == 0xa || version == 0xc);
    short unk02; Assert(unk02 == 3);
    int fileSize <format=hex>; Assert(fileSize == FileSize());
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0c <hidden=true>; Assert(unk0c == 0);
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1c <hidden=true>; Assert(unk1c == 0);
    
} Header <bgcolor=cLtRed>;

typedef struct {
    int offset00 <format=hex>;
    short count04;
    short unk06 <hidden=true>;
    
    int offset08 <format=hex>;
    short count0c;
    short unk0e <hidden=true>;
    
    int offset10 <format=hex>;
    short unk14;
    short unk16;
    
    int offset18 <format=hex>;
    short unk1c <hidden=true>; Assert(unk1c == 0);
    short unk1e <hidden=true>; Assert(unk1e == 0);
} Offsets <bgcolor=cLtGreen>;

local quad nextStructABAOffset = -1;

typedef struct {
    short type00;
    byte unk02; //Assert(unk02 == 0 || unk02 == 1);
    byte unk03; //Assert(unk03 == 0 || unk03 == 1); // Bank?
    int offset04 <format=hex>;
    int unk08;
    int unk0c <hidden=true>; Assert(unk0c == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(0x20 + offset04);
    
    Assert(nextStructABAOffset == -1 || FTell() == nextStructABAOffset);
    
    switch(type00)
    {
        case 0: break;
        case 1: StructABA1 structABA1; break;
        case 3: StructABA3 structABA3; break;
        case 4: StructABA4 structABA4; break;
        case 5: break;
        case 6: StructABA6 structABA6; break;
        case 11: StructABA11 structABA11; break;
        case 12: StructABA12 structABA12; break;
        case 19: StructABA19 structABA19; break;
        case 24: break;
        case 25: StructABA25 structABA25; break;
        case 26: StructABA26 structABA26; break;
        case 27: StructABA27 structABA27; break;
        case 28: StructABA28 structABA28; break;
        case 29: StructABA29 structABA29; break;
        case 30: StructABA30 structABA30; break;
        case 31: StructABA31 structABA31; break;
        case 32: StructABA32 structABA32; break;
        case 33: StructABA33 structABA33; break;
        case 34: StructABA34 structABA34; break;
        case 35: StructABA35 structABA35; break;
        case 37: break;
        case 39: StructABA39 structABA39; break;
        case 40: StructABA40 structABA40; break;
        case 41: StructABA41 structABA41; break;
        case 43: StructABA43 structABA43; break;
        case 45: StructABA45 structABA45; break;
        case 47: StructABA47 structABA47; break;
        case 48: StructABA48 structABA48; break;
        case 57: StructABA57 structABA57; break;
        
        default: byte b <bgcolor=cBlack>; break; // Assert(false);
    }
    
    nextStructABAOffset = FTell();
    
    FSeek(pos);
} StructABA <bgcolor=cLtYellow, optimize=false>;

typedef struct {
    short unk00; Assert(unk00 == 0x100);
    short unk02; Assert(unk02 == 0 || unk02 == 1);
    float unk04;
    int unk08; Assert(unk08 == 0);
    int unk0c; Assert(unk0c == 0);
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
} StructABB <bgcolor=cLtYellow, optimize=false>;

typedef struct {
    int unk00;
    int offset04 <format=hex>;
    int count08; Assert(count08 > 0);
    int offset0c <format=hex>; 
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1c <hidden=true>; Assert(unk1c == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(0x20 + offset04);
    StructABA structABA[count08] <bgcolor=cLtYellow>;
    FSeek(0x20 + offset0c);
    StructABB structABB;
    FSeek(pos);
} StructAB <bgcolor=cWhite, optimize=false>;

typedef struct {
    short unk00;
    short unk02;
    int offset04 <format=hex>;
    int offset08 <format=hex>;
    int count0c;
    short unk10;
    short unk12; 
    short unk14; Assert(unk14 == -1);
    short unk16;
    if(header.version > 0xa) 
    {
        ubyte data[0x88];
    }
    else
    {
        ubyte data[0x68];
    }
    
    local quad pos <hidden=true> = FTell();
    FSeek(0x20 + offset04);
    byte b <bgcolor=cBlack>;
    
    if(count0c)
    {
        FSeek(0x20 + offset08);
        StructAB StructABs[count0c];
    }
    
    FSeek(pos);
} StructA <bgcolor=(cAqua), optimize=false>;

typedef struct {
    int unk00;
    short unk04; 
    short unk06; Assert(unk06 == 0 || unk06 == 1);
    byte unk08; 
    byte unk09; Assert(unk09 == 0 || unk09 == 1);
    byte unk0a; Assert(unk0a == 0);
    byte unk0b; Assert(unk0b == 0 || unk0b == 1);
    int unk0c; 
    int unk10; 
    int unk14; 
    int unk18; Assert(unk18 == -1);
    int unk1c; Assert(unk1c == -1);
    float unk20;
    byte unk24; Assert(unk24 == 0);
    byte unk25; Assert(unk25 == 0);
    byte unk26; Assert(unk26 == 0);
    byte unk27; Assert(unk27 == 0 || unk27 == 1);
    float unk28;
    float unk2c;
    int unk30; Assert(unk30 == 0);
    int unk34; Assert(unk34 == 0);
    int unk38; Assert(unk38 == 0);
    int unk3c; Assert(unk3c == 0);
} StructB <bgcolor=cPurple, optimize=false>;

typedef struct {
    short stringCount;
    short stringOffsets[stringCount];
    struct { string str; } strings[stringCount] <read=this.str, optimize=false>;
} Strings <bgcolor=cGreen>;

//------------------------------------------------

Header header;
Offsets offsets;

FSeek(0x20 + offsets.offset00);
StructA structAs[offsets.count04];

FSeek(0x20 + offsets.offset08);
StructB structBs[offsets.count0c];
    
FSeek(0x20 + offsets.offset10);
struct { ubyte data[offsets.unk16]; } structCs[offsets.unk14] <bgcolor=cRed, optimize=false>;
    
FSeek(0x20 + offsets.offset18);

if(!FEof())
{
    Strings strings;
}